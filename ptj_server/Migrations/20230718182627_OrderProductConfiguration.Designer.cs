// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ptj_server.DatabaseContext;

#nullable disable

namespace ptj_server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230718182627_OrderProductConfiguration")]
    partial class OrderProductConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ptj_server.Models.CategoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT_ID");

                    b.HasKey("Id")
                        .HasName("PK_CATEGORY_PRODUCT");

                    b.HasIndex("ParentId");

                    b.ToTable("CATEGORY_PRODUCTS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Avatar")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("AVATAR")
                        .IsFixedLength();

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_TYPE_ID");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("IdCard")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("ID_CARD")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PHONE")
                        .IsFixedLength();

                    b.Property<int?>("ScorePay")
                        .HasColumnType("int")
                        .HasColumnName("SCORE_PAY");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id")
                        .HasName("PK_CUSTOMER");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("CUSTOMER_TYPE_NAME");

                    b.Property<string>("DiscountUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength();

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.HasKey("Id")
                        .HasName("PK_CUSTOMER_TYPE");

                    b.ToTable("CUSTOMER_TYPES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Geomancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK_GEOMANCY");

                    b.ToTable("GEOMANCIES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("NameImages")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAME_IMAGES");

                    b.HasKey("Id")
                        .HasName("PK_IMAGE");

                    b.HasIndex("IdProduct");

                    b.ToTable("IMAGES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDelivery")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDRESS_DELIVERY");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_TYPE_ID");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("DATE_CREATED");

                    b.Property<DateTime?>("DatePay")
                        .HasColumnType("date")
                        .HasColumnName("DATE_PAY");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    b.Property<string>("MailNonCus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MAIL_NON_CUS");

                    b.Property<string>("NameCusNonAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME_CUS_NON_ACCOUNT");

                    b.Property<string>("OrderState")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ORDER_STATE");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PAY_TYPE");

                    b.Property<string>("PhoneNonAccount")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PHONE_NON_ACCOUNT")
                        .IsFixedLength();

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PROMOTION_ID");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("date")
                        .HasColumnName("SHIP_DATE");

                    b.Property<int?>("ShipFee")
                        .HasColumnType("int")
                        .HasColumnName("SHIP_FEE");

                    b.Property<decimal?>("TotalPay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TOTAL_PAY");

                    b.HasKey("Id")
                        .HasName("PK_ORDER_PRODUCT");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IdUser");

                    b.HasIndex("PromotionId");

                    b.ToTable("ORDER_PRODUCTS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<bool>("BestSeller")
                        .HasColumnType("bit")
                        .HasColumnName("BEST_SELLER");

                    b.Property<int?>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("COLOR");

                    b.Property<int?>("GeomancyId")
                        .HasColumnType("int")
                        .HasColumnName("GEOMANCY_ID");

                    b.Property<bool>("HomeFlag")
                        .HasColumnType("bit")
                        .HasColumnName("HOME_FLAG");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMAGE");

                    b.Property<int?>("MainStoneId")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_STONE_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NOTE");

                    b.Property<int?>("SubStoneId")
                        .HasColumnType("int")
                        .HasColumnName("SUB_STONE_ID");

                    b.HasKey("Id")
                        .HasName("PK_PRODUCT");

                    b.HasIndex("CatId");

                    b.HasIndex("GeomancyId");

                    b.HasIndex("MainStoneId");

                    b.HasIndex("SubStoneId");

                    b.ToTable("PRODUCTS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<int?>("ImportQuantity")
                        .HasColumnType("int")
                        .HasColumnName("IMPORT_QUANTITY");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int?>("ProductPriceId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_PRICE_ID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("SIZE");

                    b.HasKey("Id")
                        .HasName("PK_PRODUCT_DETAIL");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("PRODUCT_DETAILS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("DATE_CREATED");

                    b.Property<string>("DiscountUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength();

                    b.Property<int>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.Property<int?>("GemId")
                        .HasColumnType("int")
                        .HasColumnName("GEM_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NAME");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int?>("StoneId")
                        .HasColumnType("int")
                        .HasColumnName("STONE_ID");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("date")
                        .HasColumnName("VALID_UNTIL");

                    b.HasKey("Id")
                        .HasName("PK_PRODUCT_DISCOUNT");

                    b.HasIndex("GemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoneId");

                    b.ToTable("PRODUCT_DISCOUNTS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int")
                        .HasColumnName("BASE_PRICE");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool?>("InActive")
                        .HasColumnType("bit")
                        .HasColumnName("IN_ACTIVE");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int")
                        .HasColumnName("SALE_PRICE");

                    b.HasKey("Id")
                        .HasName("PK_PRODUCT_PRICE");

                    b.ToTable("PRODUCT_PRICES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activate")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVATE");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DiscountUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength();

                    b.Property<int>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("END_DATE");

                    b.Property<int?>("MaxDiscount")
                        .HasColumnType("int")
                        .HasColumnName("MAX_DISCOUNT");

                    b.Property<int?>("MinOrder")
                        .HasColumnType("int")
                        .HasColumnName("MIN_ORDER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.HasKey("Id")
                        .HasName("PK_PROMOTION");

                    b.ToTable("PROMOTIONS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PROMOTION_ID");

                    b.HasKey("Id")
                        .HasName("PK_PROMOTION_DETAIL");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PROMOTION_DETAILS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<bool?>("Is_Update")
                        .HasColumnType("bit")
                        .HasColumnName("IS_UPDATE");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int?>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("RATE");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id")
                        .HasName("PK_REVIEW");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("REVIEWS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK_ROLE");

                    b.ToTable("ROLES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.StoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK_STONE_TYPE");

                    b.ToTable("STONE_TYPES", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("IdCard")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("ID_CARD")
                        .IsFixedLength();

                    b.Property<int?>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id")
                        .HasName("PK_USER");

                    b.HasIndex("IdRole");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("ptj_server.Models.CategoryProduct", b =>
                {
                    b.HasOne("ptj_server.Models.CategoryProduct", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CATEGORY_PRODUCT");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ptj_server.Models.Customer", b =>
                {
                    b.HasOne("ptj_server.Models.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CUSTOMER_TYPE");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("ptj_server.Models.Image", b =>
                {
                    b.HasOne("ptj_server.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_IMAGES_PRODUCTS");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ptj_server.Models.OrderProduct", b =>
                {
                    b.HasOne("ptj_server.Models.Customer", "Customer")
                        .WithMany("OrderProducts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_PRODUCTS_CUSTOMERS");

                    b.HasOne("ptj_server.Models.User", "User")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ORDER_PRODUCTS_USERS");

                    b.HasOne("ptj_server.Models.Promotion", "Promotion")
                        .WithMany("OrderProducts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PromotionOrder");

                    b.Navigation("Customer");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ptj_server.Models.Product", b =>
                {
                    b.HasOne("ptj_server.Models.CategoryProduct", "Cat")
                        .WithMany("Products")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCTS_CATEGORY_PRODUCTS");

                    b.HasOne("ptj_server.Models.Geomancy", "Geomancy")
                        .WithMany("Products")
                        .HasForeignKey("GeomancyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCTS_GEOMANCIES");

                    b.HasOne("ptj_server.Models.StoneType", "MainStone")
                        .WithMany("ProductMainStones")
                        .HasForeignKey("MainStoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__PRODUCTS__MAIN_S__3C34F16F");

                    b.HasOne("ptj_server.Models.StoneType", "SubStone")
                        .WithMany("ProductSubStones")
                        .HasForeignKey("SubStoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__PRODUCTS__SUB_ST__3D2915A8");

                    b.Navigation("Cat");

                    b.Navigation("Geomancy");

                    b.Navigation("MainStone");

                    b.Navigation("SubStone");
                });

            modelBuilder.Entity("ptj_server.Models.ProductDetail", b =>
                {
                    b.HasOne("ptj_server.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__PRODUCT_D__PRODU__625A9A57");

                    b.HasOne("ptj_server.Models.ProductPrice", "ProductPrice")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__PRODUCT_D__PRODU__634EBE90");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("ptj_server.Models.ProductDiscount", b =>
                {
                    b.HasOne("ptj_server.Models.Geomancy", "Geomancy")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("GemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_pdc_gem");

                    b.HasOne("ptj_server.Models.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCT_DISCOUNTS_PRODUCTS");

                    b.HasOne("ptj_server.Models.StoneType", "StoneType")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("StoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_pdc_stone");

                    b.Navigation("Geomancy");

                    b.Navigation("Product");

                    b.Navigation("StoneType");
                });

            modelBuilder.Entity("ptj_server.Models.PromotionDetail", b =>
                {
                    b.HasOne("ptj_server.Models.Customer", "Customer")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTION_DETAIL_CUSTOMERS");

                    b.HasOne("ptj_server.Models.Promotion", "Promotion")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PROMOTION_DETAIL_PROMOTIONS");

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ptj_server.Models.Review", b =>
                {
                    b.HasOne("ptj_server.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_REVIEWS_CUSTOMERS");

                    b.HasOne("ptj_server.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_REVIEWS_PRODUCTS");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ptj_server.Models.User", b =>
                {
                    b.HasOne("ptj_server.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_USERS_ROLE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ptj_server.Models.CategoryProduct", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptj_server.Models.Customer", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("PromotionDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ptj_server.Models.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ptj_server.Models.Geomancy", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ptj_server.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ptj_server.Models.ProductPrice", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ptj_server.Models.Promotion", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("PromotionDetails");
                });

            modelBuilder.Entity("ptj_server.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ptj_server.Models.StoneType", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductMainStones");

                    b.Navigation("ProductSubStones");
                });

            modelBuilder.Entity("ptj_server.Models.User", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
